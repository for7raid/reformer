<Window x:Class="formPrinter.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
       xmlns:Converters="clr-namespace:formPrinter.Converters"
        xmlns:local="clr-namespace:formPrinter"
        xmlns:Interactivity="clr-namespace:Microsoft.Expression.Interactivity;assembly=Microsoft.Expression.Interactivity"
        xmlns:myInteractivity="clr-namespace:formPrinter.Interactivity"
        xmlns:ac="http://akarov.ru/controls/mvvv/converters"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
         mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
        Title="реФормер" Loaded="Window_Loaded">
    <Window.Resources>
        <Converters:PathToImageSourceConverter x:Key="PathToImageSourceConverter"/>
        <Converters:CentimeterToPixelConverter x:Key="CentimeterToPixelConverter"/>
        <Converters:PathToImageBrushConverter x:Key="PathToImageBrushConverter"/>
        <Converters:ImageSourceToImageBrushConverter x:Key="ImageSourceToImageBrushConverter"/>
        <Converters:BoolenToGridLengthConverter x:Key="BoolenToGridLengthConverter"/>
        <Converters:ChekboxValueConverter x:Key="ChekboxValueConverter"/>
        <Converters:ScaleToTextConverter x:Key="ScaleToTextConverter"/>
        <Converters:FontSizeConverter x:Key="FontSizeConverter"/>
        <Converters:FontBoldConverter x:Key="FontBoldConverter"/>
        <Converters:FontItalicConverter x:Key="FontItalicConverter"/>
        <Converters:FontDecorationConverter x:Key="FontDecorationConverter"/>
        <Converters:ImageMarginConverter x:Key="ImageMarginConverter"/>
        <Converters:CentimeterToPixelConverterForAnchor x:Key="CentimeterToPixelConverterForAnchor"/>
        

        <Style TargetType="{x:Type CheckBox}" x:Key="XCheckBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid>
                            <Border>
                                <Border.Style>
                                    <Style TargetType="Border">
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="BorderBrush" Value="Black"/>
                                        <Setter Property="Background" Value="White"/>
                                        <Setter Property="Opacity" Value="0.3"/>
                                        <Setter Property="Margin" Value="-1"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="BorderThickness" Value="2"/>
                                                <Setter Property="Opacity" Value="1"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                            </Border>
                            <Border BorderBrush="Gray" BorderThickness="1" CornerRadius="1">
                                <Border BorderBrush="WhiteSmoke" BorderThickness="1" CornerRadius="1" Margin="0.1">
                                    <TextBlock Padding="0" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Text" Value=""/>
                                        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType=CheckBox},Path=FontSize}"/>
                                           
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=CheckBox},Path=IsChecked}" Value="true">
                                                 <Setter Property="Text" Value="X"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                </Style>
                                    </TextBlock.Style>
                                    </TextBlock>
                                </Border>
                            </Border>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <DataTemplate x:Key="Text">
            <TextBox Background="Transparent"
                            Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             AcceptsReturn="True" TextWrapping="WrapWithOverflow" Padding="-4,-2,0,0">
                <TextBox.TextDecorations>
                    <MultiBinding Converter="{StaticResource FontDecorationConverter}">
                        <Binding Path="Underline"/>
                        <Binding Path="Strikeout"/>
                    </MultiBinding>
                </TextBox.TextDecorations>
            </TextBox>
        </DataTemplate>
        <DataTemplate x:Key="Calendar">
            <DatePicker Background="Transparent"
                                SelectedDate="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                SelectedDateFormat="Short"/>
        </DataTemplate>
        <DataTemplate x:Key="List">
            <ComboBox Background="Transparent"
                            ItemsSource="{Binding ListChoises}"
                            SelectedValue="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      IsEditable="True"
                      Padding="-2,0,0,0"/>
        </DataTemplate>
        <DataTemplate x:Key="Check">
            <CheckBox Background="Transparent" Style="{StaticResource XCheckBox}" FontSize="{Binding FontSize, Converter={StaticResource FontSizeConverter}}"
                            IsChecked="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ChekboxValueConverter}}"
                      Padding="-4,-2,0,0"/>
        </DataTemplate>

        <DataTemplate x:Key="Anchor">
            <Grid>
                <Border Width="1" HorizontalAlignment="Center" VerticalAlignment="Stretch" BorderBrush="Black" BorderThickness="1" />
                <Border Height="1" HorizontalAlignment="Stretch" VerticalAlignment="Center"   BorderBrush="Black" BorderThickness="1"  />
            </Grid>
        </DataTemplate>

        <Style x:Key="FlatButton" TargetType="Button">
            <Setter Property="Control.Background" Value="{x:Null}" />
            <Setter Property="Control.BorderBrush" Value="{x:Null}" />
            <Setter Property="Control.Height" Value="15"/>
            <Setter Property="Control.Width" Value="15"/>
            <Setter Property="Padding" Value="-3"/>
            <Style.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                    <Setter Property="Control.Background" Value="{x:Null}" />
                    <Setter Property="Control.BorderBrush" Value="{x:Null}" />
                    <Setter Property="Control.FontWeight" Value="Bold" />
                </Trigger>
                <Trigger Property="Control.IsFocused" Value="True">
                    <Setter Property="Control.FontWeight" Value="Bold" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="elementStyleInner" TargetType="ContentControl">
            <Setter Property="ContentTemplate" Value="{StaticResource Text}"/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="FontFamily" Value="{Binding FontName}"/>
            <Setter Property="FontSize" Value="{Binding FontSize, Converter={StaticResource FontSizeConverter}}"/>
            <Setter Property="FontWeight" Value="{Binding Bold, Converter={StaticResource FontBoldConverter}}"/>
            <Setter Property="FontStyle" Value="{Binding Italic, Converter={StaticResource FontItalicConverter}}"/>
           
            <Style.Triggers>
                <Trigger Property="Control.IsFocused" Value="True">
                    <Setter Property="Control.BorderBrush" Value="Green" />
                    <Setter Property="Control.BorderThickness" Value="2" />
                </Trigger>
                <DataTrigger Binding="{Binding Path=ElementType}" Value="Text">
                    <Setter Property="ContentTemplate" Value="{StaticResource Text}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=ElementType}" Value="List">
                    <Setter Property="ContentTemplate" Value="{StaticResource List}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=ElementType}" Value="Check">
                    <Setter Property="ContentTemplate" Value="{StaticResource Check}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=ElementType}" Value="Calendar">
                    <Setter Property="ContentTemplate" Value="{StaticResource Calendar}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=ElementType}" Value="Anchor">
                    <Setter Property="ContentTemplate" Value="{StaticResource Anchor}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=ElementType}" Value="RadioButton">
                    <Setter Property="ContentTemplate" Value="{StaticResource RadioButton}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="elementStyle" TargetType="ContentPresenter">
            <Setter Property="Canvas.Left" Value="{Binding Path=X, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=X}"/>
            <Setter Property="Canvas.Top" Value="{Binding Path=Y, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=Y}"/>
            <Setter Property="Width" Value="{Binding Path=Width, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=Y}"/>
            <Setter Property="Height" Value="{Binding Path=Height, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=X}"/>
            <Setter Property="ToolTip" Value="{Binding Name}"/>

            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ContentControl Style="{StaticResource elementStyleInner}" Content="{Binding}" >
                           
                        </ContentControl>
                    </DataTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=DataContext.IsInDesign, RelativeSource={RelativeSource AncestorType= Window}}" Value="True">
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <local:InputElement Item="{Binding}" 
                                                    SelectedItem="{Binding Path=DataContext.SelectedItem, RelativeSource={RelativeSource AncestorType= Window}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementType}" Value="Anchor">
                    <Setter Property="Canvas.Left" Value="{Binding Path=X, Converter={StaticResource CentimeterToPixelConverterForAnchor}, ConverterParameter=X}"/>
                    <Setter Property="Canvas.Top" Value="{Binding Path=Y, Converter={StaticResource CentimeterToPixelConverterForAnchor}, ConverterParameter=Y}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>


        <DataTemplate x:Key="PageDataTemplate">

            <Border>

                <Grid HorizontalAlignment="Center" Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <!--Изображение подложки-->
                    <Canvas Margin="1" Background="White">
                        <Image Source="{Binding Image}" Stretch="None"
                                    Width="{Binding Path=Width, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=Y}"
                                    Height="{Binding Path=Height, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=X}"
                                    Canvas.Top="{Binding Path=ImageTop, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=Y}"
                                    Canvas.Left="{Binding Path=ImageLeft, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=X}">
                        </Image>

                    </Canvas>

                    <Border>
                        <Border.Resources>
                            <Style TargetType="Border">
                                <Setter Property="BorderBrush" Value="Black"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                <Setter Property="VerticalAlignment" Value="Stretch"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=(local:MainWindowViewModel.IsSelected)}" Value="True">
                                        <Setter Property="BorderBrush" Value="Red"/>
                                        <Setter Property="BorderThickness" Value="2"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Resources>
                    </Border>

                    <ItemsControl Margin="1"
                        ItemsSource="{Binding Elements}" 
                      Background="Transparent" 
                      ItemContainerStyle="{StaticResource elementStyle}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <!--Background="{Binding Path=Image, Converter={StaticResource ImageSourceToImageBrushConverter}}"-->
                                <Canvas 
                                    Width="{Binding Path=Width, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=Y}"
                                    Height="{Binding Path=Height, Converter={StaticResource CentimeterToPixelConverter}, ConverterParameter=X}"
                                    Margin="1">
                                </Canvas>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <Interactivity:Interaction.Behaviors>
                            <myInteractivity:MousePosition X="{Binding DataContext.CurrentPositionX, RelativeSource={RelativeSource AncestorType=Window}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                              Y="{Binding DataContext.CurrentPositionY, RelativeSource={RelativeSource AncestorType=Window}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <myInteractivity:SelectItemAtMouseMove
                                            Page="{Binding}"
                                            SelectedItem="{Binding DataContext.SelectedItem, RelativeSource={RelativeSource AncestorType=Window}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </Interactivity:Interaction.Behaviors>
                    </ItemsControl>

                    <Border Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Top" BorderBrush="Black" BorderThickness="2" Height="1" Margin="3,0"/>
                    <TextBlock  Grid.Row="1"  HorizontalAlignment="Center" Text="{Binding Name}" Margin="0,3"/>

                </Grid>
            </Border>

        </DataTemplate>

        <DataTemplate x:Key="TabDataTemplate">
            <ScrollViewer DataContext="{Binding}" CanContentScroll="True" HorizontalScrollBarVisibility="Visible" IsTabStop="False">
                <Grid>
                    <Grid.LayoutTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="{Binding Path=(local:MainWindowViewModel.Scale), Mode=TwoWay}" ScaleY="{Binding Path=(local:MainWindowViewModel.Scale), Mode=TwoWay}"/>
                        </TransformGroup>
                    </Grid.LayoutTransform>
                    <Viewbox Grid.Column="0" Grid.Row="0">
                        <ItemsControl ItemsSource="{Binding Pages}" IsTabStop="False"
                                  Background="Transparent" ItemTemplate="{StaticResource PageDataTemplate}"
                                  ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Visible">
                            <ItemsControl.InputBindings>
                               
                            </ItemsControl.InputBindings>
                        </ItemsControl >
                    </Viewbox>
                </Grid>

                <Interactivity:Interaction.Behaviors>
                    <myInteractivity:ScrollViewerMouseZoom
                        ZoomIn="{Binding Path=DataContext.ZoomInCommand, RelativeSource={RelativeSource AncestorType= Window}}"
                        ZoomOut="{Binding Path=DataContext.ZoomOutCommand, RelativeSource={RelativeSource AncestorType= Window}}"
                        Form="{Binding Path=DataContext.CurrentForm, RelativeSource={RelativeSource AncestorType= Window}}"/>
                </Interactivity:Interaction.Behaviors>

            </ScrollViewer>
        </DataTemplate>

        <DataTemplate x:Key="TabHeaderTemplate">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Path=Name}"/>
                <TextBlock Text="*" Visibility="{Binding HasChanges, Converter={x:Static ac:Converters.BoolenToVisibility}}"
                           Margin="3,0,3,0" FontWeight="Bold"/>
                <Button Command="{Binding DataContext.CloseCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                    CommandParameter="{Binding}" Style="{StaticResource FlatButton}" Margin="3,0,-3,0" IsTabStop="False">X</Button>
            </StackPanel>

        </DataTemplate>

    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Command="{Binding NewCommand}" Modifiers="Ctrl" Key="N" />
        <KeyBinding Command="{Binding OpenCommand}" Modifiers="Ctrl" Key="O" />
        <KeyBinding Command="{Binding CloseCommand}" CommandParameter="{Binding CurrentForm}"  Modifiers="Ctrl" Key="F4" />
        <KeyBinding Command="{Binding SaveCommand}" CommandParameter="{Binding CurrentForm}"  Modifiers="Ctrl" Key="S" />
        <KeyBinding Command="{Binding PrintCommand}" CommandParameter="{Binding CurrentForm}"  Modifiers="Ctrl" Key="P" />
        

        <KeyBinding Command="{Binding AddItemCommand}" Key="Insert" />
        <KeyBinding Command="{Binding RemoveItemCommand}" Key="Delete" />

        <KeyBinding Command="{Binding CopyCommand}" Modifiers="Ctrl" Key="C" />

        <KeyBinding Command="{Binding TableModeOnOffCommand}" Modifiers="Ctrl" Key="T" />
        <KeyBinding Command="{Binding DesingModeOnOffCommand}" Modifiers="Ctrl" Key="D" />
    </Window.InputBindings>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition Height="30"/>
            <RowDefinition/>
            <RowDefinition Height="30"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="{Binding IsTableMode, Converter={StaticResource BoolenToGridLengthConverter}, ConverterParameter=0.5*}"/>
            <ColumnDefinition Width="{Binding IsTableMode, Converter={StaticResource BoolenToGridLengthConverter}, ConverterParameter=Auto}"/>
            <ColumnDefinition/>
            <ColumnDefinition Width="{Binding IsInDesign, Converter={StaticResource BoolenToGridLengthConverter}, ConverterParameter=0.3*}"/>
        </Grid.ColumnDefinitions>
        <Menu Grid.ColumnSpan="4" IsTabStop="False">
            <MenuItem Header="Бланк">
                <MenuItem Header="Новый" Command="{Binding NewCommand}" InputGestureText="Ctrl+N"/>
                <MenuItem Header="Открыть шаблон" ItemsSource="{Binding Templates}">
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <MenuItem Header="{Binding}" Command="{Binding DataContext.OpenTemplateCommand, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}"/>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
                <MenuItem Header="Отктыть..." Command="{Binding OpenCommand}"  InputGestureText="Ctrl+O"/>
                <MenuItem Header="Сохранить" Command="{Binding SaveCommand}" CommandParameter="{Binding CurrentForm}"  InputGestureText="Ctrl+S" />
                <MenuItem Header="Сохранить как..." Command="{Binding SaveAsCommand}" CommandParameter="{Binding CurrentForm}"/>
                <MenuItem Header="Сохранить как шаблон..." Command="{Binding SaveAsTemplateCommand}" CommandParameter="{Binding CurrentForm}"/>
                <MenuItem Header="Закрыть" Command="{Binding CloseCommand}" CommandParameter="{Binding CurrentForm}"  InputGestureText="Ctrl+F4"/>
                <Separator/>
                <MenuItem Header="Предварительный просмотр..." Command="{Binding PrintPreviewCommand}" CommandParameter="{Binding CurrentForm}"/>
                <MenuItem Header="Печать..." Command="{Binding PrintCommand}" CommandParameter="{Binding CurrentForm}"  InputGestureText="Ctrl+P"/>
                <Separator/>
                <MenuItem Header="Выход" Command="{Binding ExitCommand}"/>
            </MenuItem>
            <MenuItem Header="Вид">
                <MenuItem Header="Режим плоской таблицы" IsCheckable="True" IsChecked="{Binding IsTableMode}" InputGestureText="Ctrl+T"/>
                <Separator/>
                <MenuItem Header="Увеличить изображение"  Command="{Binding ZoomInCommand}"  CommandParameter="{Binding CurrentForm}" InputGestureText="Ctrl+Mouse Wheal Up"/>
                <MenuItem Header="Уменьшить изображение"  Command="{Binding ZoomOutCommand}"  CommandParameter="{Binding CurrentForm}" InputGestureText="Ctrl+Mouse Wheal Down"/>
                <MenuItem Header="Масштаб 100%"  Command="{Binding ZoomNormalCommand}"  CommandParameter="{Binding CurrentForm}" InputGestureText="Ctrl+Mouse Middle Click"/>

            </MenuItem>
            <MenuItem Header="Констурктор">
                <MenuItem Header="Режим конструктора" IsCheckable="True" IsChecked="{Binding IsInDesign}" InputGestureText="Ctrl+D"/>
                <Separator/>
                <MenuItem Header="Добавить страницу или поле" Command="{Binding AddItemCommand}" InputGestureText="Insert" />
                <MenuItem Header="Удалить страницу или поле" Command="{Binding RemoveItemCommand}"  InputGestureText="Delete"/>

                <MenuItem Header="Создать копию" Command="{Binding CopyCommand}" InputGestureText="Ctrl+C"/>
                <Separator/>
                <MenuItem Header="Переместить вверх" Command="{Binding ItemUpCommand}"/>
                <MenuItem Header="Переместить вних" Command="{Binding ItemDownCommand}"/>
            </MenuItem>
            <MenuItem Header="Сервис">
                <MenuItem Header="Напечатать калибровочный лист"  Command="{Binding PrintCalibratePageCommand}" />
                <MenuItem Header="Связать файлы с программой"  Command="{Binding FileAssotiateCommand}" />
            </MenuItem>
        </Menu>


        <!--Плоский список с полями слева-->
        <ScrollViewer
            Grid.Column="0" Grid.Row="1" Grid.RowSpan="2"
                      Margin="5,1"
                CanContentScroll="True">
            <ItemsControl ItemsSource="{Binding SelectedItem.Elements}">
                <ItemsControl.Style>
                    <Style TargetType="ItemsControl">
                        <Style.Triggers>
                            <Trigger Property="ItemsSource" Value="{x:Null}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <TextBlock Text="Выделите лист, который вы хотите заполнить, щелкнув по нему левой кнопкой мыши" FontStyle="Italic" TextWrapping="WrapWithOverflow"
                                                       HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ItemsControl.Style>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="3*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding Name}" Margin="1" TextWrapping="WrapWithOverflow"/>
                            <ContentControl Grid.Column="1" Content="{Binding}" Style="{StaticResource elementStyleInner}" FontSize="12"/>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>

            </ItemsControl>
        </ScrollViewer>


        <GridSplitter 
            ResizeDirection="Columns" 
            Grid.Column="1"
            Grid.Row="1"
            Grid.RowSpan="2"
            Width="3" 
            HorizontalAlignment="Stretch" 
            VerticalAlignment="Stretch" 
            Margin="0"/>

        <!--Основная область-->
        <TabControl ItemsSource="{Binding Forms}" 
                    ContentTemplate="{StaticResource TabDataTemplate}"
                    ItemTemplate="{StaticResource TabHeaderTemplate}"
                    SelectedItem="{Binding CurrentForm}"
                    Grid.Column="2" Grid.Row="1" Grid.RowSpan="2"
                    IsTabStop="False">

        </TabControl>

        <!--Кнопочки над констрктором-->
        <StackPanel Orientation="Horizontal"  Grid.Row="1" Grid.Column="3" Margin="1">
            <Button Command="{Binding AddItemCommand}">
                <Image Source="pack://application:,,,/Icons/edit_add.png"/>
            </Button>
            <Button Command="{Binding RemoveItemCommand}" Margin="1">
                <Image Source="pack://application:,,,/Icons/edit_remove.png"/>
            </Button>

            <Button Command="{Binding CopyCommand}" ToolTip="Копировать страницу или элемент и вставить после текущего выделенного элемента" Margin="3,0">
                <Image Source="pack://application:,,,/Icons/editcopy.png"/>
            </Button>

            <Button Command="{Binding ItemUpCommand}" Margin="1">
                <Image Source="pack://application:,,,/Icons/up.png"/>
            </Button>
            <Button Command="{Binding ItemDownCommand}" Margin="1">
                <Image Source="pack://application:,,,/Icons/down.png"/>
            </Button>
        </StackPanel>

        <!--Конструкто-->
        <local:PropertiesControl
            Grid.Row="2" Grid.Column="3"
            Form="{Binding DataContext.CurrentForm, RelativeSource={RelativeSource AncestorType=Window}}"
            SelectedItem="{Binding DataContext.SelectedItem, RelativeSource={RelativeSource AncestorType=Window}, Mode=TwoWay}"/>

        <!--Строка состояния-->
        <StatusBar Grid.Row="3" Grid.ColumnSpan="4">
            <StatusBarItem Margin="2,0">
                <StatusBarItem.Content>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat="{}Курсор мыши {0:N2};{1:N2} см">
                                <Binding Path="CurrentPositionX"/>
                                <Binding Path="CurrentPositionY"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </StatusBarItem.Content>
            </StatusBarItem>
            <StatusBarItem Content="{Binding Path=CurrentForm.(local:MainWindowViewModel.Scale), Converter={StaticResource ScaleToTextConverter}}"/>
        </StatusBar>
    </Grid>
</Window>
